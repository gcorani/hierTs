library(forecast)
?auto.arima
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
model <- auto.arima(agees)
model <- auto.arima(agges)
model <- auto.arima(eggs)
library(fpp2)
model <- auto.arima(eggs)
tmp <- forecast(model, h=h, level=1-alpha)
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
alpha = 0.9
tmp <- forecast(model, h=h, level=1-alpha)
h=2
tmp <- forecast(model, h=h, level=1-alpha)
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
a <- hier(htseg1, fmethod=ets)
a <- hier(htseg1, h=1, fmethod=ets)
a <- hier(hierTs = htseg1, h=1, fmethod=ets)
a <- hier(hierTs = htseg1, h=1, fmethod="ets")
load("~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/results.Rdata")
a[[6]]==resultsHtseg1[[6]]
a <- hier(hierTs = htseg1, h=1, fmethod="arima")
b <- hier(hierTs = htseg1, h=4, fmethod="arima")
c <- hier(hierTs = htseg2, h=4, fmethod="arima")
d <- hier(hierTs = htseg2, h=1, fmethod="arima")
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
e <- hier(hierTs = infantgts, h=1, fmethod="arima")
View(a)
View(b)
View(c)
View(d)
View(e)
f <- hier(hierTs = infantgts, h=4, fmethod="arima")
View(f)
View(d)
d$percBetterComb
d$maeComb
d$maeBayes
apply(d$maeComb,2,mean)
apply(d$maeBayes,2,mean)
apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)
htseg2$bts
apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)
tmp <- (apply(d$maeComb,2,mean)+apply(d$maeBayes,2,mean))/2
apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)/2
View(f)
View(e)
apply(d$maeBu,2,mean)-apply(d$maeBayes,2,mean)/2
((apply(d$maeBu,2,mean)-apply(d$maeBayes,2,mean))/tmp
(apply(d$maeBu,2,mean)-apply(d$maeBayes,2,mean)) /tmp
(apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp
tmp <- (apply(d$maeComb,2,mean)+apply(d$maeBayes,2,mean))/2
(apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp
mean((apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp)
mean((apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp)[10:17]
mean((apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp[10:17])
mean((apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)))
apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean))
apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)))
(apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp
((apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp)[10:17]
((apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp)[1]
((apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp)[2:3]
((apply(d$maeComb,2,mean)-apply(d$maeBayes,2,mean)) / tmp)[4:10]
((apply(d$maeBu,2,mean)-apply(d$maeBayes,2,mean)) / tmp)[4:10]
((apply(d$maeBu,2,mean)-apply(d$maeBayes,2,mean)) / tmp)
d$maeBu
d$maeBayes
tmp <- (apply(e$maeComb,2,mean)+apply(e$maeBayes,2,mean))/2
((apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp)
mean((apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp)
e$percBetterBu
boxplot(apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp)
boxplot (apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp)
boxplot (apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp
boxplot ( (apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp)
boxplot ( (apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp , outline = FALSE)
summary  ( apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp )
summary  ( (apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp) )
summary  ( (apply(e$maeBu,2,mean)-apply(e$maeBayes,2,mean)) / tmp )
summary  ( (apply(e$maeComb,2,mean)-apply(e$maeBayes,2,mean)) / tmp )
summary  ( (apply(e$maeCombWls,2,mean)-apply(e$maeBayes,2,mean)) / tmp )
summary  ( (apply(e$maeCombMint,2,mean)-apply(e$maeBayes,2,mean)) / tmp )
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
a <- hier(htseg1, h=1)
View(a)
b <- hier(htseg1, h=4)
View(b)
b <- hier(htseg1, h=2)
View(b)
c <- hier(htseg2, h=1)
View(c)
c <- hier(htseg2, h=4)
View(c)
d <- hier(infantgts, h=4)
View(d)
e <- hier(infantgts, h=1)
View(e)
c <- hier(htseg2, h=2, fmethod = "arima")
View(c)
c <- hier(infantgts, h=2, fmethod = "arima")
View(c)
?forecast.gts
?rw
rw
?naive
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
library(fpp2)
model <- rw(eggs)
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
library(readr)
Input <- read_csv("~/Downloads/Input.csv",
col_types = cols(ACHEMA = col_number(),
ACRON = col_number(), ANVILL = col_number(),
BOREALIS = col_number(), `CONC%` = col_number(),
`CUSTOMER-group` = col_character(),
EUROCHEM = col_number(), FERTIBERIA = col_number(),
OCI = col_number(), `OTHER EASTERN EUROPEAN` = col_number(),
PETROKEMIJA = col_number(), YARA = col_number()))
uniqueCustomer <- unique(Input$CUSTOMER)
totRows <- nrow(Input)
outData <- data.frame(nrow=totRows, ncol = 3)
suppliers <- c("YARA","ACHEMA","ACRON","ANVILL","BASF","BOREALIS")
colnames(outData) <- c("customer","supplier","qty")
outData <- data.frame(nrow=totRows, ncol = 3)
suppliers <- c("YARA","ACHEMA","ACRON","ANVILL","BASF","BOREALIS")
colnames(outData) <- c("customer","supplier","qty")
outData
outData <- data.frame()
suppliers <- c("YARA","ACHEMA","ACRON","ANVILL","BASF","BOREALIS")
colnames(outData) <- c("customer","supplier","qty")
Input$CUSTOMER
Input$CUSTOMER==uniqueCustomer[1]
custom=uniqueCustomer[1]
idx  <- Input$CUSTOMER==custom
data <- Input[idx,]
data
for (custom in uniqueCustomer){
idx  <- Input$CUSTOMER==custom
data <- Input[idx,]
}
idx
dats
data
source('~/Downloads/ff.R')
library(readr)
Input <- read_csv("~/Downloads/Input.csv",
col_types = cols(ACHEMA = col_number(),
ACRON = col_number(), ANVILL = col_number(),
BOREALIS = col_number(), `CONC%` = col_number(),
`CUSTOMER-group` = col_character(),
EUROCHEM = col_number(), FERTIBERIA = col_number(),
OCI = col_number(), `OTHER EASTERN EUROPEAN` = col_number(),
PETROKEMIJA = col_number(), YARA = col_number()))
uniqueCustomer <- unique(Input$CUSTOMER)
totRows <- nrow(Input)
outData <- data.frame()
suppliers <- c("YARA","ACHEMA","ACRON","ANVILL","BASF","BOREALIS")
View(Input)
colnames(Input)[20]
colnames(Input)[25]
colnames(Input)[28]
suppliers <- colnames(Input)[10:28]
colnames(outData) <- c("customer","supplier","qty")
suppliers
suppliers <- colnames(Input)[10:27]
custom
uniqueCustomer
uniqueCustomer[1]
a<-uniqueCustomer[1]
c<- data.frame()
Input$ACHEMA
Input$ACHEMA[1]
Input$ACHEMA[1]>0
is.na(Input$ACHEMA[1])
is.numeric(Input$YARA[1])
source('~/Downloads/ff.R')
dataConverter()
dataConverter <- function (){
library(readr)
Input <- read_csv("~/Downloads/Input.csv",
col_types = cols(ACHEMA = col_number(),
ACRON = col_number(), ANVILL = col_number(),
BOREALIS = col_number(), `CONC%` = col_number(),
`CUSTOMER-group` = col_character(),
EUROCHEM = col_number(), FERTIBERIA = col_number(),
OCI = col_number(), `OTHER EASTERN EUROPEAN` = col_number(),
PETROKEMIJA = col_number(), YARA = col_number()))
uniqueCustomer <- unique(Input$CUSTOMER)
totRows <- nrow(Input)
outData <- data.frame()
suppliers <- colnames(Input)[10:27]
counter <- 1
for (custom in uniqueCustomer){
idx  <- Input$CUSTOMER==custom
data <- Input[idx,]
for (i in idx) {
for (supply in suppliers){
if (is.numeric(data[i,supply])) {
outData[counter]$customer <- custom
outData[counter]$supplier <- supply
outData[counter]$qty <- data[i,supply]
}
return(outData)
}
library(readr)
Input <- read_csv("~/Downloads/Input.csv",
col_types = cols(ACHEMA = col_number(),
ACRON = col_number(), ANVILL = col_number(),
BOREALIS = col_number(), `CONC%` = col_number(),
`CUSTOMER-group` = col_character(),
EUROCHEM = col_number(), FERTIBERIA = col_number(),
OCI = col_number(), `OTHER EASTERN EUROPEAN` = col_number(),
PETROKEMIJA = col_number(), YARA = col_number()))
uniqueCustomer <- unique(Input$CUSTOMER)
totRows <- nrow(Input)
outData <- data.frame()
suppliers <- colnames(Input)[10:27]
counter <- 1
idx  <- Input$CUSTOMER==custom
counter <- 1
uniqueCustomer[1]
custom <- uniqueCustomer[1]
idx  <- Input$CUSTOMER==custom
idx
idx==TRUE
sum(odx)
sum(idx)
data <- Input[idx,]
data
View(data)
idx
for (i in idx) print(i)
length(data)
nrow(data)
i <- 1
suppliers
supply <- suppliers[1]
supply
(is.numeric(data[i,supply]))
data[i,supply]
class[i,supply]
data[i,supply]
class(data[i,supply])
data[i,supply]
data[i,supply] > 0
data[i,supply] == 0
debugSource('~/Downloads/ff.R')
View(data)
suppliers
supply<-suppliers[5]
(is.numeric(data[i,supply]))
data[i,supply]
library(readr)
Input <- read_csv("~/Downloads/Input.csv",
col_types = cols(ACHEMA = col_number(),
ACRON = col_number(), ANVILL = col_number(),
BASF = col_number(), BOREALIS = col_number(),
BRENNTAG = col_number(), CF_INDUSTRIES = col_number(),
`CONC%` = col_number(), EUROCHEM = col_number(),
FERTIBERIA = col_number(), GRUPA_AZOTY = col_number(),
INEOS = col_number(), `OTHER EASTERN EUROPEAN` = col_number(),
`OTHERS (1) - SUPPLIER NAME` = col_character(),
`OTHERS (1) - VOLUME` = col_number(),
SEGMENT = col_character(), SKW = col_number(),
YARA = col_number()), na = "0")
library(readr)
Input <- read_csv("~/Downloads/Input.csv",
col_types = cols(ACHEMA = col_number(),
ACRON = col_number(), ANVILL = col_number(),
BASF = col_number(), BOREALIS = col_number(),
BRENNTAG = col_number(), CF_INDUSTRIES = col_number(),
`CONC%` = col_number(), EUROCHEM = col_number(),
FERTIBERIA = col_number(), GRUPA_AZOTY = col_number(),
INEOS = col_number(), `OTHER EASTERN EUROPEAN` = col_number(),
`OTHERS (1) - SUPPLIER NAME` = col_character(),
`OTHERS (1) - VOLUME` = col_number(),
SEGMENT = col_character(), SKW = col_number(),
YARA = col_number()), na = "0")
View(Input)
uniqueCustomer <- unique(Input$CUSTOMER)
totRows <- nrow(Input)
outData <- data.frame()
suppliers <- colnames(Input)[10:27]
counter <- 1
custom
data <- Input[idx,]
idx  <- Input$CUSTOMER==custom
data <- Input[idx,]
View(data)
for (custom in uniqueCustomer){
idx  <- Input$CUSTOMER==custom
data <- Input[idx,]
for (i in 1:nrow(data)) {
for (supply in suppliers){
if (is.numeric(data[i,supply])) {
outData[counter]$customer <- custom
outData[counter]$supplier <- supply
outData[counter]$qty <- data[i,supply]
}
outData
counter <- 1
debugSource('~/Downloads/ff.R')
dataConverter()
supply
is.numeric(data[i,supply]))
is.numeric(data[i,supply])
(data[i,supply])
supply
(data[i,supply])
(data[i,supply]) > 0
is.numeric(data[i,supply])
supply <- suppliers[1]
supply
data[i,supply]>0
is.na(data[i,supply])
supply
outData
supply
debugSource('~/Downloads/ff.R')
dataConverter()
debugSource('~/Downloads/ff.R')
dataConverter()
supply
dataConverter()
debugSource('~/Downloads/ff.R')
dataConverter()
data[i,supply]
supply
data[i,supply]
is.na(data[i,supply])
custom
supply
data[i,supply]
as.numeric(data[i,supply])
debugSource('~/Downloads/ff.R')
a <- dataConverter()
debugSource('~/Downloads/ff.R')
a <- dataConverter()
a<-data.frame(su=character())
a
a$su <- 1:100
debugSource('~/Downloads/ff.R')
a$su <- 1:100
a <- dataConverter()
custom
outData[counter]$customer
outData$customer[1]
debugSource('~/Downloads/ff.R')
a <- dataConverter()
a
View(a)
a[1]
a$customer
a$customer[1]
a <- dataConverter()
outData$customer[1]
custom
as.character(custom)
class(custom)
outData$customer[counter]
outData$supplier[counter]
outData$qty[counter]
as.numeric(data[i,supply]
)
as.numeric(data[i,supply])
outData$customer[counter] <- "pippo"
a<-data.frame(s=numeric(1000))
a
a$s[100]<-5
a$pippo[100]<-5
debugSource('~/Downloads/ff.R')
a <- dataConverter()
debugSource('~/Downloads/ff.R')
a <- dataConverter()
outData$supplier[counter]
outData$customer[counter]
a <- dataConverter()
a
View(a)
View(Input)
source('~/Downloads/ff.R')
View(a)
a <- dataConverter()
source('~/Downloads/ff.R')
a <- dataConverter()
as.numeric(data[i,supply])
as.numeric(data[i,supply]) > 0
debugSource('~/Downloads/ff.R')
a <- dataConverter()
data[i,supply]
as.numeric(data[i,supply])
as.numeric(data[i,supply]) > 0
debugSource('~/Downloads/ff.R')
a <- dataConverter()
(as.numeric(data[i,supply])
)
data[i,supply]
is.numeric(data[i,supply])
debugSource('~/Downloads/ff.R')
a <- dataConverter()
a
View(a)
a <- dataConverter()
debugSource('~/Downloads/ff.R')
a <- dataConverter()
a
a <- dataConverter()
is.numeric(data[i,supply]))
is.numeric(data[i,supply])
data[i,supply]
as.numeric(data[i,supply])>0
as.numeric("a"])>0
as.numeric("a")>0
Input <- read_csv("~/Downloads/Input.csv",
col_types = cols(ACHEMA = col_number(),
ACRON = col_number(), ANVILL = col_number(),
BASF = col_number(), BOREALIS = col_number(),
BRENNTAG = col_number(), CF_INDUSTRIES = col_number(),
`CONC%` = col_number(), EUROCHEM = col_number(),
OCI=col_number(),
FERTIBERIA = col_number(), GRUPA_AZOTY = col_number(),
INEOS = col_number(), `OTHER EASTERN EUROPEAN` = col_number(),
`OTHERS (1) - SUPPLIER NAME` = col_character(),
`OTHERS (1) - VOLUME` = col_number(),
SEGMENT = col_character(), SKW = col_number(),
YARA = col_number()), na = "0")
a<-dataConverter()
debugSource('~/Downloads/ff.R')
a<-dataConverter()
debugSource('~/Downloads/ff.R')
a<-dataConverter()
debugSource('~/Downloads/ff.R')
a<-dataConverter()
library(readr)
Input <- read_csv("~/Downloads/Input.csv",
col_types = cols(ACHEMA = col_number(),
ACRON = col_number(), ANVILL = col_number(),
BASF = col_number(), BOREALIS = col_number(),
BRENNTAG = col_number(), CF_INDUSTRIES = col_number(),
`CONC%` = col_number(), EUROCHEM = col_number(),
OCI=col_number(),
FERTIBERIA = col_number(), GRUPA_AZOTY = col_number(),
INEOS = col_number(), `OTHER EASTERN EUROPEAN` = col_number(),
`OTHERS (1) - SUPPLIER NAME` = col_character(),
`OTHERS (1) - VOLUME` = col_number(),
SEGMENT = col_character(), SKW = col_number(),
YARA = col_number()), na = "0")
uniqueCustomer <- unique(Input$CUSTOMER)
n<-20000
outData <- data.frame(
qty=numeric(n)
)
suppliers <- colnames(Input)[10:27]
counter <- 1
for (custom in uniqueCustomer){
# print (paste("custom: ", custom))
idx  <- Input$CUSTOMER==custom
data <- Input[idx,]
for (i in 1:nrow(data)) {
for (supply in suppliers){
# print (paste("supply: ", supply))
if ( (! is.na(data[i,supply])) & (is.numeric(data[i,supply])) )
{
if (as.numeric(data[i,supply]) > 0)  {
outData$customer[counter] <- custom
outData$supplier[counter] <- supply
outData$qty[counter] <- as.numeric(data[i,supply])
counter <- counter + 1
}
View(outData)
debugSource('~/Downloads/ff.R')
?inv
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
hier(htseg2)
fcastBu
debugSource('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
hier(htseg2)
priorCov %*% A %*%
solve (t(A) %*% priorCov %*% A + Sigma_y)
priorCov %*% A
dim(S)
dim(priorCov)
debugSource('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
hier(htseg2)
priorCov %*% A
Sigma_y
debugSource('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
hier(htseg2)
t(A) %*% priorCov %*% A + Sigma_y
t(A) %*% priorCov %*% A
dim(t(A) %*% priorCov %*% A)
dim(Sigma_y)
dim(priorCov)
hier(htseg2)
dim (priorCov)
dim(t(A) %*% priorCov %*% A )
debugSource('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hier.R')
source('~/switchDrive/hierTs/hierarchicalTimeSeries/code/hierTs/hierOld.R')
hierOld(htseg1)
preds
sigma
maeCombMint[iTest,
]
a<-hierOld(htseg1)
a
a<-hierOld(htseg1)
a<-hierOld(infantgts)
View(a)
a[["maeBayes"]]
