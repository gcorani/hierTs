largeSynthetic_n100 <- read_csv("results/synth-final/largeSynthetic_n100.csv")
View(largeSynthetic_n100)
median(largeSynthetic_n100$mseCombMintShr/largeSynthetic_n100$mseBayesShr)
median(largeSynthetic_n100$mseCombMintShr/largeSynthetic_n100$mseBase)
median(largeSynthetic_n100$mseBayesDiag/largeSynthetic_n100$mseBayesGlasso)
library(readr)
largeSynthetic_n10 <- read_csv("results/synth-final/largeSynthetic_n10.csv")
View(largeSynthetic_n10)
median(largeSynthetic_n10$mseMintSample/largeSynthetic_n100$mseBayesSample)
median(largeSynthetic_n10$mseMintSample/largeSynthetic_n100$mseBayesSample, na.rm = TRUE)
median(largeSynthetic_n10$mseMintSample/largeSynthetic_n10$mseBayesSample, na.rm = TRUE)
median(largeSynthetic_n10$mseCombMintShr/largeSynthetic_n10$mseBayesShr, na.rm = TRUE)
library(readr)
tourism <- read_csv("results/tourism.csv")
View(tourism)
idx <- tourism$fmethod=="ets"
median(tourism[idx,"mseBase"]/tourism[idx,"mseCombMintSample"])
median(tourism[idx,"mseBase"])
tourism[idx,"mseBase"]
median(tourism[idx,"mseBase"])
class(tourism[idx,"mseBase"])
tourism[idx,"mseBase"]
head(tourism[idx,"mseBase"])
mean(tourism[idx,"mseBase"])
a<-(tourism[idx,"mseBase"])
mean(a)
a
View(a)
a[1]
mean(data.frame(a))
mean(as.numeric(a))
mean(as.array(a))
tourism <- as.data.frame(tourism)
median(tourism[idx,"mseBase"])
median(tourism[idx,"mseBase"]/tourism[idx,"mseCombMintShr"])
median(tourism[idx,"mseBayesShr"]/tourism[idx,"mseCombMintShr"])
median(tourism[idx,"mseBayesGlasso"]/tourism[idx,"mseCombMintShr"])
mean(tourism[idx,"mseBayesGlasso"]/tourism[idx,"mseCombMintShr"])
boxplot(log(tourism[idx,"mseBayesGlasso"]-tourism[idx,"mseCombMintShr"]))
boxplot(log(tourism[idx,"mseBayesGlasso"]/tourism[idx,"mseCombMintShr"]))
boxplot(log(tourism[idx,"mseBayesShr"]/tourism[idx,"mseCombMintShr"]))
debugSource('~/switchDrive/paperReconc/hierTsCode/hierRec.R', echo=TRUE)
debugSource('~/switchDrive/paperReconc/hierTsCode/hierRec.R')
hierRec("largeSynthetic")
a<-"synthetic""
a<-"synthetic"
c<-  c("synthethic","infantgts")
a %in% c
c<-  c("synthetic","infantgts")
a %in% c
debugSource('~/switchDrive/paperReconc/hierTsCode/hierRec.R')
source('~/switchDrive/paperReconc/hierTsCode/hierRec.R')
hierRec("pippo")
source('~/switchDrive/paperReconc/hierTsCode/hierRec.R')
stop ( paste("feasible dset are:", feasibleDset ) )
source('~/switchDrive/paperReconc/hierTsCode/hierRec.R', echo=TRUE)
hierRec("pippo")
print(feasibleDset)
as.character(feasibleDset)
source('~/switchDrive/paperReconc/hierTsCode/hierRec.R')
hierRec("pippo")
source('~/switchDrive/paperReconc/hierTsCode/hierRec.R')
hierRec("syntheticLarge")
cov(bottomResiduals)
#the covariances are the covariances of the time series
#the variances are the variances of the forecasts, hence the variances of the residuals
out.glasso <- huge(bottomResiduals, method = "glasso", cov.output = TRUE)
out.select <- huge.select(out.glasso, criterion = "ebic")
out.select
out.select$opt.cov
out.select
out.glasso
class(out.glasso)
View(out.glasso)
out.glasso
out.glasso$sparsity
out.glasso$icov
out.glasso$icov[[8]]
prec <- out.glasso$icov[[8]]
inv(prec)
solve(prec)
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
summary <- data.frame(dset=rep(dsets[1],configs),
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMintBayesShrGreater=rep(-1,configs),
pValMintBayesGlassoGreater=rep(-1,configs),
stringsAsFactors = FALSE
)
summary
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
results <- data.frame(dset=rep(dsets[1],configs),
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMintBayesShrGreater=rep(-1,configs),
pValMintBayesGlassoGreater=rep(-1,configs),
stringsAsFactors = FALSE
)
dset <- "infantgs"
dset <- "infantgts"
#parse the results of hierarchical non-temporal reconciliation
#readt the mse, extract the proportion of favorable signs and the produces the boxplot
library(readr)
source('bayesianSignedRank.R')
results <- read_csv(paste("results/mse_",dset,".csv",sep=""))
results <- unique(results) #because some experiements on the cluster are duplicated
fmethods <- unique(results$fmethod)
horizons <- unique(results$h)
configs <- length(fmethods) * length(horizons)
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
results <- data.frame(dset=rep(dsets[1],configs),
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMintBayesShrGreater=rep(-1,configs),
pValMintBayesGlassoGreater=rep(-1,configs),
stringsAsFactors = FALSE
)
fmethods <- unique(results$fmethod)
horizons <- unique(results$h)
horizons
configs <- length(fmethods) * length(horizons)
configs
fmethods
configs <- length(fmethods) * length(horizons)
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
results <- data.frame(dset=rep(dsets[1],configs),
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMintBayesShrGreater=rep(-1,configs),
pValMintBayesGlassoGreater=rep(-1,configs),
stringsAsFactors = FALSE
)
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
results <- data.frame(
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMintBayesShrGreater=rep(-1,configs),
pValMintBayesGlassoGreater=rep(-1,configs),
stringsAsFactors = FALSE
)
horizons
femthods
fmethods
h <- 1
fmethod<-"arima"
results$fmethod[counter] <- fmethod
idx = results$fmethod==fmethod & results$h==h
subresults <- results[idx,]
subresults
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
stats <- data.frame(
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMintBayesShrGreater=rep(-1,configs),
pValMintBayesGlassoGreater=rep(-1,configs),
stringsAsFactors = FALSE
)
sstats
results <- read_csv(paste("results/mse_",dset,".csv",sep=""))
results <- unique(results) #because some experiements on the cluster are duplicated
fmethods <- unique(results$fmethod)
horizons <- unique(results$h)
configs <- length(fmethods) * length(horizons)
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
comparison <- data.frame(
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMintBayesShrGreater=rep(-1,configs),
pValMintBayesGlassoGreater=rep(-1,configs),
stringsAsFactors = FALSE
)
results$fmethod[counter] <- fmethod
idx = results$fmethod==fmethod & results$h==h
subresults <- results[idx,]
subresults
comparison$cases[counter] <- length(idx)
counter <- 1
comparison$cases[counter] <- length(idx)
comparison$cases[counter]
sum(idx)
comparison$cases[counter] <- sum(idx)
comparison$fmethod[counter] <- fmethod
wilcox.test(log(subresults$mseCombMint / subresults$mseBayes),
alternative="less")$p.value
wilcox.test(log(subresults$mseCombMint / subresults$mseBayes))
dset
#parse the results of hierarchical non-temporal reconciliation
#readt the mse, extract the proportion of favorable signs and the produces the boxplot
library(readr)
source('bayesianSignedRank.R')
results <- read_csv(paste("results/mse_",dset,".csv",sep=""))
results <- unique(results) #because some experiements on the cluster are duplicated
fmethods <- unique(results$fmethod)
horizons <- unique(results$h)
configs <- length(fmethods) * length(horizons)
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
comparison <- data.frame(
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMintBayesShrGreater=rep(-1,configs),
pValMintBayesGlassoGreater=rep(-1,configs),
stringsAsFactors = FALSE
)
h
femthod
fmethod
comparison$fmethod[counter] <- fmethod
idx = results$fmethod==fmethod & results$h==h
subresults <- results[idx,]
comparison$cases[counter] <- sum(idx)
comparison$fmethod[counter] <- fmethod
comparison$medianBaseMint <- median(subresults$mseBase / subresults$mseCombMintShr)
comparison$medianBaseBayesShr <- median(subresults$mseBase / subresults$mseBayesShr)
comparison$medianBaseBayesGlasso <- median(subresults$mseBase / subresults$mseBayesGlasso)
comparison$medianMintBayesShr <- median(subresults$mseCombMintShr / subresults$mseBayesShr)
comparison$medianMintBayesGlasso <- median(subresults$mseCombMintShr / subresults$mseBayesGlasso)
comparison$pValMedianMintBayesGreater[counter] <- wilcox.test(log(subresults$mseCombMint / subresults$mseBayes),
comparison$pValMedianMintBayesLess[counter] <- wilcox.test(log(subresults$mseCombMint / subresults$mseBayes),
alternative="less")$p.value
comparison$medianMintBayesGlasso <- median(subresults$mseCombMintShr / subresults$mseBayesGlasso)
wilcox.test(log(subresults$mseCombMint / subresults$mseBayes))
subresults
wilcox.test(log(subresults$mseCombMintShr/ subresults$mseBayesShr)
)
wilcox.test(log(subresults$mseCombMintShr/ subresults$mseBayesShr))
wilcox.test(log(subresults$mseCombMintShr/ subresults$mseBayesShr), alternative = "less")
bayesianSignedRank(log(subresults$mseCombMintShr/ subresults$mseBayesShr), rope_min = 0, rope_max = 0)
install.packages("MCMCpack")
bayesianSignedRank(log(subresults$mseCombMintShr/ subresults$mseBayesShr), rope_min = 0, rope_max = 0)
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R', echo=TRUE)
fmethod
for (h in horizons){
print(paste(fmethod,dset))
comparison$fmethod[counter] <- fmethod
idx = results$fmethod==fmethod & results$h==h
if (sum(idx)>0){
subresults <- results[idx,]
comparison$cases[counter] <- sum(idx)
comparison$fmethod[counter] <- fmethod
comparison$medianBaseMint <- median(subresults$mseBase / subresults$mseCombMintShr)
comparison$medianBaseBayesShr <- median(subresults$mseBase / subresults$mseBayesShr)
comparison$medianBaseBayesGlasso <- median(subresults$mseBase / subresults$mseBayesGlasso)
comparison$medianMintBayesShr <- median(subresults$mseCombMintShr / subresults$mseBayesShr)
comparison$medianMintBayesGlasso <- median(subresults$mseCombMintShr / subresults$mseBayesGlasso)
comparison$pValMedianMintBayesShr[counter] <- wilcox.test(log(subresults$mseCombMintShr/ subresults$mseBayesShr),
alternative="less")$p.value
comparison$pValMedianMintBayesGlasso[counter] <- wilcox.test(log(subresults$mseCombMint / subresults$mseBayes),
alternative="less")$p.value
}
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R', echo=TRUE)
for (h in horizons){
print(paste(fmethod,dset))
comparison$fmethod[counter] <- fmethod
idx = results$fmethod==fmethod & results$h==h
if (sum(idx)>0){
subresults <- results[idx,]
comparison$cases[counter] <- sum(idx)
comparison$fmethod[counter] <- fmethod
comparison$medianBaseMint <- median(subresults$mseBase / subresults$mseCombMintShr)
comparison$medianBaseBayesShr <- median(subresults$mseBase / subresults$mseBayesShr)
comparison$medianBaseBayesGlasso <- median(subresults$mseBase / subresults$mseBayesGlasso)
comparison$medianMintBayesShr <- median(subresults$mseCombMintShr / subresults$mseBayesShr)
comparison$medianMintBayesGlasso <- median(subresults$mseCombMintShr / subresults$mseBayesGlasso)
comparison$pValMedianMintBayesShr[counter] <- wilcox.test(log(subresults$mseCombMintShr/ subresults$mseBayesShr),
alternative="less")$p.value
comparison$pValMedianMintBayesGlasso[counter] <- wilcox.test(log(subresults$mseCombMint / subresults$mseBayes),
alternative="less")$p.value
}
for (h in horizons){
print(paste(fmethod,dset))
comparison$fmethod[counter] <- fmethod
idx = results$fmethod==fmethod & results$h==h
if (sum(idx)>0){
subresults <- results[idx,]
comparison$cases[counter] <- sum(idx)
comparison$fmethod[counter] <- fmethod
comparison$medianBaseMint <- median(subresults$mseBase / subresults$mseCombMintShr)
comparison$medianBaseBayesShr <- median(subresults$mseBase / subresults$mseBayesShr)
comparison$medianBaseBayesGlasso <- median(subresults$mseBase / subresults$mseBayesGlasso)
comparison$medianMintBayesShr <- median(subresults$mseCombMintShr / subresults$mseBayesShr)
comparison$medianMintBayesGlasso <- median(subresults$mseCombMintShr / subresults$mseBayesGlasso)
comparison$pValMedianMintBayesShr[counter] <- wilcox.test(log(subresults$mseCombMintShr/ subresults$mseBayesShr),
alternative="less")$p.value
comparison$pValMedianMintBayesGlasso[counter] <- wilcox.test(log(subresults$mseCombMintShr / subresults$mseBayesGlasso),
alternative="less")$p.value
}
pdfname <- paste("results/plot","_",dset,"_",fmethod,".pdf",sep = "")
pdfname
denom <- subresults$mseBase
resLenght <- length(subresults$mseBase)
#old code, 3 models
# relMse <- rbind(matrix(subresults$mseCombMint/denom), matrix(subresults$mseBayes/denom), matrix(subresults$mseBayesCorr/denom))
# label <-  factor(rbind(matrix(rep("Mint",resLenght)),matrix(rep("Bayes",resLenght)),matrix(rep("Bayes (corr)",resLenght))),
# levels = c("Mint","Bayes","Bayes (corr)"))
#new code, 2 models (minT and Bayes corr)
relMse <- rbind(matrix(subresults$mseCombMint/denom), matrix(subresults$mseBayesCorr/denom))
relMs
#generate the bplot with ggplot2
library(ggplot2)
pdfname <- paste("results/plot","_",dset,"_",fmethod,".pdf",sep = "")
denom <- subresults$mseBase
resLenght <- length(subresults$mseBase)
#old code, 3 models
# relMse <- rbind(matrix(subresults$mseCombMint/denom), matrix(subresults$mseBayes/denom), matrix(subresults$mseBayesCorr/denom))
# label <-  factor(rbind(matrix(rep("Mint",resLenght)),matrix(rep("Bayes",resLenght)),matrix(rep("Bayes (corr)",resLenght))),
# levels = c("Mint","Bayes","Bayes (corr)"))
#new code, 2 models (minT and Bayes corr)
relMse <- rbind(matrix(subresults$mseCombMintShr/denom), matrix(subresults$mseBayesShr/denom), matrix(subresults$mseBayesGlasso/denom))
relMse
#old code, 3 models
# relMse <- rbind(matrix(subresults$mseCombMint/denom), matrix(subresults$mseBayes/denom), matrix(subresults$mseBayesCorr/denom))
# label <-  factor(rbind(matrix(rep("Mint",resLenght)),matrix(rep("Bayes",resLenght)),matrix(rep("Bayes (corr)",resLenght))),
# levels = c("Mint","Bayes","Bayes (corr)"))
#new code, 2 models (minT and Bayes corr)
relMse <- rbind(matrix(subresults$mseCombMintShr/denom), matrix(subresults$mseBayesShr/denom), matrix(subresults$mseBayesGlasso/denom))
label <-  factor(rbind(matrix(rep("MinT",resLenght)),matrix(rep("Bayes-shr",resLenght))),
matrix(rep("Bayes-glasso",resLenght)))
#old code, 3 models
# relMse <- rbind(matrix(subresults$mseCombMint/denom), matrix(subresults$mseBayes/denom), matrix(subresults$mseBayesCorr/denom))
# label <-  factor(rbind(matrix(rep("Mint",resLenght)),matrix(rep("Bayes",resLenght)),matrix(rep("Bayes (corr)",resLenght))),
# levels = c("Mint","Bayes","Bayes (corr)"))
#new code, 2 models (minT and Bayes corr)
relMse <- rbind(matrix(subresults$mseCombMintShr/denom), matrix(subresults$mseBayesShr/denom), matrix(subresults$mseBayesGlasso/denom))
label <-  factor(rbind(matrix(rep("MinT",resLenght)),matrix(rep("Bayes-shr",resLenght))),
matrix(rep("Bayes-glasso",resLenght)),
levels = c("MinT","Bayes-shr","Bayes-glasso"))
resLenght
rbind(matrix(rep("MinT",resLenght)),matrix(rep("Bayes-shr",resLenght))),
matrix(rep("Bayes-glasso",resLenght))
rbind(matrix(rep("MinT",resLenght)),matrix(rep("Bayes-shr",resLenght)), matrix(rep("Bayes-glasso",resLenght)))
label <-  factor(rbind(matrix(rep("MinT",resLenght)),matrix(rep("Bayes-shr",resLenght)),
matrix(rep("Bayes-glasso",resLenght))),
levels = c("MinT","Bayes-shr","Bayes-glasso"))
label
dataPlot <- as.data.frame(relMse)
dataPlot$label <- label
currentPlot <- ggplot(dataPlot, aes(x = label, y = log10(relMse))) + geom_boxplot()  +
stat_boxplot(geom = "errorbar", width = 0.5) +  #draw the whiskers
scale_x_discrete(name = "") +
scale_y_continuous(name = "Log (relative mse)")
scaling <- 1.8 #to avoid large outliers that make the boxplot unreadable
if (dset=="tourism"){
scaling<- 1.1
}
else if (fmethod=="ets"){
scaling<- 3
}
ylim1 = boxplot.stats(log(dataPlot$V1))$stats[c(1, 5)]
currentPlot = currentPlot + coord_cartesian(ylim = ylim1*scaling)  + geom_hline(yintercept = 0, color='darkblue', linetype="dashed")
print(currentPlot)
boxplot.stats(log(dataPlot$V1))$stats[c(1, 5)]
scaling
scaling <- 1.8 #to avoid large outliers that make the boxplot unreadable
ylim1 = boxplot.stats(log(dataPlot$V1))$stats[c(1, 5)]
currentPlot = currentPlot + coord_cartesian(ylim = ylim1*scaling)  + geom_hline(yintercept = 0, color='darkblue', linetype="dashed")
print(currentPlot)
ggsave(pdfname, width = 4, height = 3)
scaling
scaling<- 1.1
ylim1 = boxplot.stats(log(dataPlot$V1))$stats[c(1, 5)]
currentPlot = currentPlot + coord_cartesian(ylim = ylim1*scaling)  + geom_hline(yintercept = 0, color='darkblue', linetype="dashed")
print(currentPlot)
pdfname
parseHierResults_aggregatedH("infantgts")
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R', echo=TRUE)
parseHierResults_aggregatedH("infantgts")
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
paste(dset, fmethod)
for (fmethod in fmethods){
for (h in horizons){
print(paste(fmethod,dset))
comparison$fmethod[counter] <- fmethod
idx = results$fmethod==fmethod & results$h==h
if (sum(idx)>0){
subresults <- results[idx,]
comparison$cases[counter] <- sum(idx)
comparison$fmethod[counter] <- fmethod
comparison$medianBaseMint <- median(subresults$mseBase / subresults$mseCombMintShr)
comparison$medianBaseBayesShr <- median(subresults$mseBase / subresults$mseBayesShr)
comparison$medianBaseBayesGlasso <- median(subresults$mseBase / subresults$mseBayesGlasso)
comparison$medianMintBayesShr <- median(subresults$mseCombMintShr / subresults$mseBayesShr)
comparison$medianMintBayesGlasso <- median(subresults$mseCombMintShr / subresults$mseBayesGlasso)
comparison$pValMedianMintBayesShr[counter] <- wilcox.test(log(subresults$mseCombMintShr/ subresults$mseBayesShr),
alternative="less")$p.value
comparison$pValMedianMintBayesGlasso[counter] <- wilcox.test(log(subresults$mseCombMintShr / subresults$mseBayesGlasso),
alternative="less")$p.value
}
#generate the bplot with ggplot2
library(ggplot2)
pdfname <- paste("results/plot","_",dset,"_",fmethod,".pdf",sep = "")
denom <- subresults$mseBase
resLenght <- length(subresults$mseBase)
#old code, 3 models
# relMse <- rbind(matrix(subresults$mseCombMint/denom), matrix(subresults$mseBayes/denom), matrix(subresults$mseBayesCorr/denom))
# label <-  factor(rbind(matrix(rep("Mint",resLenght)),matrix(rep("Bayes",resLenght)),matrix(rep("Bayes (corr)",resLenght))),
# levels = c("Mint","Bayes","Bayes (corr)"))
#new code, 2 models (minT and Bayes corr)
relMse <- rbind(matrix(subresults$mseCombMintShr/denom), matrix(subresults$mseBayesShr/denom), matrix(subresults$mseBayesGlasso/denom))
label <-  factor(rbind(matrix(rep("MinT",resLenght)),matrix(rep("Bayes-shr",resLenght)),
matrix(rep("Bayes-glasso",resLenght))),
levels = c("MinT","Bayes-shr","Bayes-glasso"))
dataPlot <- as.data.frame(relMse)
dataPlot$label <- label
currentPlot <- ggplot(dataPlot, aes(x = label, y = log10(relMse))) + geom_boxplot()  +
stat_boxplot(geom = "errorbar", width = 0.5) +  #draw the whiskers
scale_x_discrete(name = "") +
scale_y_continuous(name = "Log (relative mse)") +
ggtitle(paste (dset, fmethod))
scaling <- 1.8 #to avoid large outliers that make the boxplot unreadable
if (dset=="tourism"){
scaling<- 1.1
}
else if (fmethod=="ets"){
scaling<- 3
}
ylim1 = boxplot.stats(log(dataPlot$V1))$stats[c(1, 5)]
currentPlot = currentPlot + coord_cartesian(ylim = ylim1*scaling)  + geom_hline(yintercept = 0, color='darkblue', linetype="dashed")
print(currentPlot)
ggsave(pdfname, width = 4, height = 3)
}
parseHierResults_aggregatedH("tourism")
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R', echo=TRUE)
parseHierResults_aggregatedH("tourism")
parseHierResults_aggregatedH("infantgts")
comparison
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
parseHierResults_aggregatedH("infantgts")
comparison
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R', echo=TRUE)
parseHierResults_aggregatedH("infantgts")
comparison
parseHierResults_aggregatedH("infantgts")
sum(idx)
subresults
comparison
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
parseHierResults_aggregatedH("infantgts")
comparison
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
#we need first to instantiate the data frame with placeholder values, and then we fill the correct values
comparison <- data.frame(
cases = rep(fmethods[1],configs),
fmethod=rep(fmethods[1],configs),
medianBaseMint=rep(-1,configs),
medianBaseBayesShr=rep(-1,configs),
medianBaseBayesGlasso=rep(-1,configs),
medianMintBayesShr =rep(-1,configs),
medianMintBayesGlasso =rep(-1,configs),
pValMedianMintBayesShr=rep(-1,configs),
pValMedianMintBayesGlasso=rep(-1,configs),
stringsAsFactors = FALSE
)
aggrComparison <- comparison[1:length(fmethods),]
aggrComparison
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R', echo=TRUE)
parseHierResults_aggregatedH(dset)
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R', echo=TRUE)
parseHierResults_aggregatedH(dset)
subresults
dim(subresults)
aggrComparison
subresults$mseCombMintShr/subresults$mseBayesShr)
subresults$mseCombMintShr/subresults$mseBayesShr
log(subresults$mseCombMintShr/subresults$mseBayesShr)
wilcox.test(log(subresults$mseCombMintShr/subresults$mseBayesShr))
debugSource('~/switchDrive/paperReconc/hierTsCode/parseHierResults_aggregatedH.R')
parseHierResults_aggregatedH(dset)
parseHierResults_aggregatedH("tourism")
